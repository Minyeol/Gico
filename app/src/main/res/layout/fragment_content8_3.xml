<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit8.FragmentContent8_3">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_above="@+id/homeButton8_3"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_centerHorizontal="true"
        android:layout_marginStart="30dp"
        android:layout_marginLeft="30dp"
        android:layout_marginTop="29dp"
        android:layout_marginEnd="30dp"
        android:layout_marginRight="30dp"
        android:layout_marginBottom="31dp"
        android:background="@color/white">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n 지금까지 1차원 배열을 다루었습니다. 이번에는 2차원 배열에 대해 알아보겠습니다.

2차원 배열은 다음과 같이 가로 x 세로 형태로 이루어져 있으며 행과 열 모두 인덱스 0부터 시작합니다.\n"/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array8" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n 2차원 배열은 [ ] (대괄호)를 두 번 사용하여 선언하며 첫 번째 대괄호에는 세로 크기, 두 번째 대괄호에는 가로 크기를 지정합니다. 일반적으로 2차원 공간은 가로x세로로 표기하지만 배열로 만들 때는 세로x가로로 표기합니다.
\n 자료형 배열이름[세로크기][가로크기];

\n 자료형 배열이름[세로크기][가로크기] = { { 값, 값, 값 }, {값, 값, 값} };
\n다음은 세로 크기가 3, 가로 크기가 4인 int형 2차원 배열을 선언하는 방법입니다. 2차원 배열을 선언하면서 초기화하려면 { } (중괄호)를 사용하는데 가로 요소들을 먼저 묶어주고, 가로 줄을 세로 크기 만큼 다시 묶어줍니다. { } 안의 값과 줄 개수는 가로, 세로 크기보다 크면 안 됩니다. \n"/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array9" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n{ }를 사용하여 배열에 값을 할당하는 방법은 배열을 선언할 때만 사용할 수 있으며 이미 선언된 배열에는 사용할 수 없습니다.

2차원 배열의 요소에 접근하려면 배열 뒤에 [ ] (대괄호)를 두 번 사용하며 [ ] 안에 세로와 가로 인덱스를 지정해주면 됩니다.
\n 배열[세로인덱스][가로인덱스]
\n즉, 다음과 같이 2차원 배열에서 세로 인덱스 1, 가로 인덱스 2인 요소의 값을 가져올 수 있습니다.
\nint num1 = numArr[1][2]; // 2차원 배열에서 세로 인덱스 1, 가로 인덱스 2인 요소에 접근
\n\n이제 2차원 배열을 선언하고 요소의 값을 출력해보겠습니다."/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array10" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n세로 크기 3, 가로 크기 4인 int형 2차원 배열을 선언하고, 값을 초기화 했습니다.
\n2차원 배열도 인덱스는 0부터 시작합니다. 따라서 배열 numArr의 가로 첫 번째, 세로 첫 번째 요소는 numArr[0][0]이 됩니다. \n"/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array11" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n 1차원 배열과 마찬가지로 2차원 배열을 선언할 때 { 0, }을 할당하여 배열의 요소를 모두 0으로 초기화할 수 있고 배열을 선언할 때 값을 초기화하지 않고, 배열의 요소에 각각 할당할 수도 있습니다.
\n2차원 배열이 차지하는 전체 공간과 가로, 세로 요소의 개수는 sizeof 연산자로 구할 수 있습니다. 다음 코드를 실행해보세요.\n"/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array12" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\nsizeof로 2차원 배열의 크기를 구해보면 배열이 차지하는 전체 공간이 출력됩니다.
\n가로(column, 열)의 요소 개수를 구하려면 sizeof(numArr[0])와 같이 가로 한 줄의 크기를 구한 뒤 요소의 크기로 나누면 됩니다.
\n세로(row, 행)의 요소 개수는 배열이 차지하는 전체 공간을 가로 한 줄의 크기로 나눠주면 됩니다.
\n\n이제 반복문을 사용하여 2차원 배열의 요소를 모두 출력해보겠습니다."/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array13" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n먼저 배열의 세로 크기와 가로 크기를 구해줍니다. 그리고 for 반복문으로 세로부터 반복한 뒤 가로를 반복하면서 2차원 배열의 요소를 출력합니다.
\n반복문의 변수 i와 j는 변화식을 통해 1씩 증가하므로 2차원 배열의 세로 인덱스에는 i, 가로 인덱스에는 j를 넣으면 배열의 요소를 순서대로 접근할 수 있습니다. \n"/>
        </LinearLayout>

    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton8_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="28dp"
        android:layout_marginLeft="28dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton8_3"
        android:layout_toLeftOf="@+id/forwardButton8_3"
        android:layout_toEndOf="@+id/backButton8_3"
        android:layout_toRightOf="@+id/backButton8_3"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton8_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

    <ImageButton
        android:id="@+id/backButton8_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="69dp"
        android:layout_marginLeft="69dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/back_button" />
</RelativeLayout>
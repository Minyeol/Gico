<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit1.FragmentContent3">

    <!-- TODO: Update blank fragment layout -->

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/homeButton4_3"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_marginStart="30dp"
        android:layout_marginTop="30dp"
        android:layout_marginEnd="30dp"
        android:layout_marginBottom="30dp"
        android:background="@drawable/edge">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="   재귀함수를 이용해 구현한 코드와 반복문으로 구현한 코드는 여러 가지 공통점을 갖고 있습니다. 함께 알아볼까요?\n\n
 (1) 재귀함수와 반복문은 모두 반복되는 구조를 만들고 싶을 때 사용합니다. 특히 재귀함수는 반복되는 함수 호출을 통해 반복을 구현합니다.\n
 (2) 반복문은 반복 조건이 참이 아닐 때 반복을 종료하고, 재귀함수는 base case에 도달했을 때 반복을 종료합니다. 반대로 반복문은 반복 조건이 참이면 반복을 계속하고, 재귀함수는 base case에 도달하지 못했다면 반복을 계속합니다.\n
 (3) 반복문과 재귀함수 둘 다 무한반복을 만들어 낼 수 있습니다. 반복문은 반복 조건이 절대 거짓이 될 수 없다면 무한반복을 만들어내고, 재귀함수는 base case에 절대로 도달할 수 없다면 무한반복을 만들어 냅니다.\n\n

 사실, 컴퓨터과학에서는 재귀함수로 풀 수 있는 문제는 모두 반복문으로 풀 수 있다는 사실이 잘 알려져 있습니다. 앞선 피보나치 수열 문제를 반복문으로 풀어 볼까요?\n
" />

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:src="@drawable/recur31" />

            <ImageView
                android:id="@+id/imageView5"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:src="@drawable/recur22" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n   재귀함수는 많은 단점을 가지고 있습니다. 앞선 fibonacci 함수를 예로 들어 볼까요? fibonacci(40)의 값은 약 1억인데, base case에는 0과 1밖에 들어 있지 않으므로 fibonacci(40)이라는 구문은 적어도 fibonacci(1)을 1억 회 이상 호출했다고 생각할 수 있습니다. 이는 컴퓨터 메모리의 낭비이고 동시에 시간 낭비이기도 합니다. 게다가 fibonacci(n)의 값은 n이 1씩 증가할 때마다 약 1.6배씩 증가하는데, 이는 다시 말하면 fibonacci(1)이 호출되는 횟수 또한 n이 1씩 증가할 때마다 1.6배씩 지수적으로 증가한다는 뜻이기도 합니다.[1][2]\n
 재귀함수가 반복문에 비해 이렇게 많은 단점을 가지고 있다면, 왜 재귀함수를 사용할까요? 일부 문제의 경우 재귀함수를 사용하는 것이 반복문을 사용하는 것에 비해 문제의 본질을 더 잘 나타내어 주는 경우가 있습니다. 이런 경우 재귀함수를 사용한 코드가 반복문을 사용한 코드보다 훨씬 짧고, 예쁘고, 알아보기 쉬워집니다. 지금은 잘 와 닿지 않을 수 있겠지만, 나중에 정렬에 대해서 배울 때 merge sort 구문을 살펴보면 재귀함수를 이용한 코드가 훨씬 더 직관적임을 보게 될 것입니다.\n
\n
 [1] 이러한 상황을 가리켜, 우리의 fibonacci 알고리즘의 시간복잡도는 O(1.6^n)보다 크다고 표현합니다. 시간복잡도에 대해서는 알고리즘 개론 시간에 배워 보도록 합시다.\n
 [2] 이 문제를 해결하기 위해 컴퓨터과학자들은 Memoization이라는 기법을 생각해 냈는데요, 이 기법에 대해서도 알고리즘 개론 시간에 배워 보도록 합시다.\n" />
        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="28dp"
        android:layout_marginLeft="28dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton4_3"
        android:layout_toLeftOf="@+id/forwardButton4_3"
        android:layout_toEndOf="@+id/backButton4_3"
        android:layout_toRightOf="@+id/backButton4_3"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

    <ImageButton
        android:id="@+id/backButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="69dp"
        android:layout_marginLeft="69dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/back_button" />

</RelativeLayout>
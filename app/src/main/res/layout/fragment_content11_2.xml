<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit1.FragmentContent3">

    <!-- TODO: Update blank fragment layout -->

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/homeButton4_3"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_marginStart="30dp"
        android:layout_marginTop="30dp"
        android:layout_marginEnd="30dp"
        android:layout_marginBottom="30dp"
        android:background="@drawable/edge">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="      시간복잡도는 알고리즘이 문제를 해결하는데 시간이 얼마나 걸리는지를 표현한 것입니다. 같은 문제를 해결하는 서로 다른 방법들이 존재할 때, 더 효율적인 방법을 사용하는 것이 좋을 것입니다. 알고리즘에서는 이를 시간복잡도의 비교를 통해 결정합니다.\n
 시간복잡도의 표기에는 보통 Big-O 표기법을 사용합니다. Big-O 표기법은 알고리즘이 최악의 경우에도 이 시간 내로 수행된다는 것을 뜻합니다. 이 외에도 최소한 이 정도는 걸린다는 의미인 Big-omega 표기법, Big-O와 Big-omega를 모두 만족한다는 의미인 Big-theta 표기법 등도 있습니다.\n
 그렇다면 본격적으로 알고리즘의 시간복잡도를 Big-O 표기법으로 나타내는 방법에 대해서 배워보겠습니다. n을 데이터의 개수라고 하고, f(n)을 알고리즘의 계산시간이라고 했을 때, f(n)이 O(g(n))이라는 것은 충분히 큰 모든 n에 대하여 양의 실수 M이 존재하여 M*g(n) >= f(n)이 성립한다는 의미입니다. 무한히 증가하는 n에 비하여 고정된 값인 g(n)의 계수는 매우 작은 값이므로 g(n)의 계수는 보통 1로 사용하며, 같은 이유에서 g(n)은 최고차항만 존재하도록 사용합니다. 따라서 g(n)으로 사용하는 함수들은 n, n^2, log n, 2^n 등을 사용합니다.\n
 이제 버블 정렬의 시간복잡도를 계산해보도록 하겠습니다. 버블정렬 코드에서 i는 0부터 size(=n) - pass - 1까지 반복하고, pass는 1부터 n - 1 까지 반복합니다. 따라서 pass가 1일 때 i는 n-1번, pass가 2일 때 i는 n-1번, ..., pass가 n-1일 때 i가 1번 반복하므로 총 반복횟수는 (n-1) + (n-2) + ... + 1 = n*(n-1)/2가 됩니다. n*(n-1)/2 은 O(n^2)이므로 버블정렬의 시간복잡도는 O(n^2)입니다.\n
" />
        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="28dp"
        android:layout_marginLeft="28dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton4_3"
        android:layout_toLeftOf="@+id/forwardButton4_3"
        android:layout_toEndOf="@+id/backButton4_3"
        android:layout_toRightOf="@+id/backButton4_3"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

    <ImageButton
        android:id="@+id/backButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="69dp"
        android:layout_marginLeft="69dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/back_button" />

</RelativeLayout>
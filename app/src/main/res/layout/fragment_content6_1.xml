<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit6.FragmentContent6_1">

    <!-- TODO: Update blank fragment layout -->

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_above="@+id/homeButton6_1"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_marginStart="30dp"
        android:layout_marginTop="30dp"
        android:layout_marginEnd="30dp"
        android:layout_marginBottom="30dp"
        android:background="@drawable/edge">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:id="@+id/textView611"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="@drawable/edge"
                android:text="   재귀함수란 자기 자신을 호출하는 함수입니다. 자기 자신을 호출한다는 개념이 잘 와 닿지 않는
분들이 많으실 텐데요, 먼저 Factorial을 계산하는 함수의 예시를 통해 재귀함수가 어떻게 작동하는지 알아볼까요?\n
" />

            <ImageView
                android:id="@+id/imageView2"
                android:layout_width="wrap_content"
                android:layout_height="360dp"
                android:src="@drawable/recur11" />

            <ImageView
                android:id="@+id/imageView3"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:src="@drawable/recur12" />

            <TextView
                android:id="@+id/textView612"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="@drawable/edge"
                android:text=" factorial은 n부터 1까지의 모든 자연수를 곱한 값을 리턴해 주는 함수입니다. 예를 들어 factorial(6)은 6, 5, 4, 3, 2, 1을 모두 곱한 720을 리턴합니다. 그리고 factorial(0)은 1로 정의됩니다. 그렇다면 이 코드가 어떻게 6부터 1까지의 자연수를 모두 곱한 값을 출력하게 되는 걸까요?\n
 먼저 main 함수에서 factorial(6)을 호출했습니다. 이 함수는 n=6을 대입한 6 * factorial(5)를 리턴하려 하는데요, 이때 다시 factorial(5)가 호출되면서 이 함수는 다시 5 * factorial(4)를 리턴하려 합니다. 이때 호출된 factorial(4)는 다시 4 * factorial(3)을 리턴하고, 이때 호출된 factorial(3)은 다시 3 * factorial(2)를 리턴하고, 이런 과정을 반복해 결국 factorial(0)까지 호출하다 보면 recursion 절차가 끝납니다. factorial(0)은 base case이기 때문에 더 이상 자기 자신을 호출하지 않기 때문입니다. base case라는 용어는 나중에 다시 설명하겠습니다. \n
 factorial(1)은 1 * factorial(0)을 리턴하는 함수인데, factorial(0)은 1을 리턴하므로 결국 factorial(1)은 1을 리턴합니다.\n
 마찬가지로 factorial(2)는 2 * factorial(1), 즉 2 * 1 = 2를 리턴합니다.\n
 Factorial(3)은 3 * factorial(2) = 3 * 2 = 6을 리턴하고,\n
 factorial(4)는 4 * factorial(3) = 4 * 6 = 24를 리턴합니다.\n
 factorial(5)는 5 * 24 = 120을, factorial(6)은 6 * 120 = 720을 리턴합니다.\n
 이때 120 = 5 * 4 * 3 * 2 * 1과 같습니다. 즉 factorial(6)은 6 * 5 * 4 * 3 * 2 * 1과 같으므로 우리가 원하는 결과를 얻었습니다.\n

 이제 재귀함수를 어떨 때 사용하면 좋을지 조금 감이 오시나요? 앞선 Factorial 문제에서, 우리가 factorial(6)이라는 문제를 풀 수 있었던 이유는 factorial(5)라는 문제를 풀면 factorial(6)이라는 문제도 풀 수 있기 때문이었습니다. 그리고 factorial(4)라는 문제를 풀면 factorial(5)라는 문제도 풀 수 있고, factorial(3)이라는 문제를 풀면 factorial(4)라는 문제도 풀 수 있고... 이렇게 Factorial이라는 문제는 문제를 점점 더 작은 부분 문제로 쪼개서 푸는 것이 가능한 문제입니다. 이처럼, 문제를 부분 문제로 쪼갤 수 있는 경우 재귀함수의 사용이 상당히 유용합니다.\n\n

 이제 Base case와 Recursive step에 대해 알아봅시다. 위의 예제에서, n을 unsigned int형 변수가 아니라 double형 변수로 바꾸었다고 가정해 봅시다. factorial(3.5)라는 문제를 풀 수 있을까요? 그럴 수 없습니다. factorial(3.5)를 풀기 위해서는 factorial(0.5)를 풀어야 하는데 그럴 수 없기 때문입니다.\n
 어째서 factorial(4)는 풀 수 있지만 factorial(3.5)는 풀 수 없을까요? 그 이유는 factorial(4)는 자기 자신을 호출하는 과정을 반복하다 보면 factorial(0)에 닿지만, factorial(3.5)는 factorial(0)에 닿지 않기 때문입니다. 여기서 factorial(0)은, 쉽게 말해서 가장 작은 부분 문제입니다.\n
 앞서 문제를 부분 문제로 쪼갤 수 있으면 재귀함수가 유용하다고 언급했었죠? 문제를 부분 문제로 쪼개고 쪼개다 보면 더 이상 쪼개지지 않는, 가장 쉬운 부분 문제가 등장하는데 그것을 바로 Base case라고 합니다. factorial(0)은 더 이상 쪼개지지 않고, 1을 리턴하기만 하면 되므로 Base case의 가장 적절한 예시입니다. 반면 factorial(0.5)는 그 값을 알 수 없기 때문에 Base case가 될 수 없습니다.\n
 한편 Recursive step은 Base case로 가기 위해 자기 자신을 계속해서 호출해내는 과정이라고 생각하면 편합니다. 재귀함수를 어렵다고 생각하시는 분들이 많은데, 문제를 볼 때마다 이 문제의 Base case가 무엇이고 Recursive step이 무엇인지를 나누어서 생각하는 습관을 들이면 코딩에 큰 도움이 됩니다.\n\n" />
        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton6_1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="170dp"
        android:layout_marginLeft="170dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton6_1"
        android:layout_toLeftOf="@+id/forwardButton6_1"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton6_1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

</RelativeLayout>
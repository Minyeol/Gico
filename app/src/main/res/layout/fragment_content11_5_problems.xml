<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit1.FragmentContent3">

    <!-- TODO: Update blank fragment layout -->

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/homeButton4_3"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_marginStart="30dp"
        android:layout_marginTop="30dp"
        android:layout_marginEnd="30dp"
        android:layout_marginBottom="30dp"
        android:background="@drawable/edge">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="@drawable/edge"
                android:gravity="center"
                android:padding="5dp"
                android:text="버블"
                android:textSize="25dp" />

            <TextView
                android:id="@+id/textView313"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:autoLink="web"
                android:linksClickable="true"
                android:text=" \n\n 승빈이는 버블 소트를 굉장히 좋아하기 때문에, 버블 정렬 이외의 다른 정렬 방식은 모두 마귀라고 생각한다. 특히 승빈이는 시간복잡도가 O(nlogn)이나 되는 합병 정렬을 굉장히 싫어한다. 그래서 승빈이는 생일 선물로, 정렬했을 때 버블 정렬이 합병 정렬보다 더 빠르고 길이가 N인 배열을 받고 싶다. 예를 들면 {1, 2, 3, 4}는 정렬 시간이 버블 정렬을 사용했을 때 0초, 합병 정렬을 사용했을 때 0.16초가 걸리므로 승빈이가 받고 싶은 생일 선물 중 하나이다. 각 정렬을 사용할 때마다 걸리는 시간을 어떻게 잴까? 다음과 같은 규칙을 따른다.\n\n
 * 어떤 배열에 수를 집어넣는 연산은 한 번 시행할 때마다 1초가 걸리고, 그 이외의 연산은 모두 0초가 걸린다.\n\n
 \u003C첨단 코딩\u003E 학습 7.4의 예제 코드를 보면, 위 규칙에 따르면 합병 정렬을 사용하면 배열의 초기 상태가 어떻게 되어 있느냐에 상관없이 정렬하는 데 항상 같은 시간이 걸림을 알 수 있다. 승빈이에 따르면 그 시간은 다음과 같다.\n\n

 N = 16: 128초\n
 N = 20: 176초\n
 N = 25: 236초\n
 N = 32: 320초\n
 N = 50: 572초\n\n

 (1) N = 40일 때, 합병 정렬을 사용하면 몇 초가 걸리는지 계산하는 프로그램을 작성하시오. 합병 정렬의 구현 방식은 \u003C첨단 코딩\u003E 학습 7.4의 방식을 따른다.\n
 (2) N = 16, 20, 25, 32, 50일 때, 승빈이의 생일 선물이 될 수 없는 배열을 아무거나 하나 첫째 줄에 출력하고, 그 배열은 버블 정렬로 정렬했을 때 몇 초가 걸리는지 둘째 줄에 출력하는 프로그램을 작성하시오.\n\n

 문제를 만든 사람 : 송혜근\n\n
"
                android:padding="5dp"/>
        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="28dp"
        android:layout_marginLeft="28dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton4_3"
        android:layout_toLeftOf="@+id/forwardButton4_3"
        android:layout_toEndOf="@+id/backButton4_3"
        android:layout_toRightOf="@+id/backButton4_3"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

    <ImageButton
        android:id="@+id/backButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="69dp"
        android:layout_marginLeft="69dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/back_button" />

</RelativeLayout>
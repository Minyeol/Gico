<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit1.FragmentContent3">

    <!-- TODO: Update blank fragment layout -->

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/homeButton12_3"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_marginStart="30dp"
        android:layout_marginTop="30dp"
        android:layout_marginEnd="30dp"
        android:layout_marginBottom="30dp"
        android:background="@drawable/edge">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:padding="5dp"
                android:text="  이전 단원에서 실행할 때마다 seed 값이 바뀌도록 설계해야 한다고 했었는데, 시간을 이용하면 이를 간단하게 해결할 수 있습니다. 시간에 대한 함수들은 time.h 헤더파일 안에 보통 포함되어 있으므로, #include\u003Ctime.h\u003E 코드를 통해 이를 추가해 주도록 합시다.\n\n
  time.h 헤더파일에서 사용할 함수는 time 함수입니다. time함수는 UTC 기준 1970년 1월 1일 0시 0분 0초부터 현재까지의 시간을 초단위로 반환하는 함수입니다. time(NULL)과 같은 형태로 사용합니다. time함수의 사용 예시는 다음과 같습니다.\n" />

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:padding="5dp"
                android:src="@drawable/random9" />
            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:padding="5dp"
                android:src="@drawable/random10" />
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:padding="5dp"
                android:text="\n  seed가 조금만 바뀌어도 rand의 결과가 완전히 달라지므로, 1초만 지나도 실행 결과는 완전히 바뀌게 됩니다. 따라서 time함수를 이용하면 랜덤 함수를 완성할 수 있습니다. 이를 이용한 랜덤함수의 예시는 다음과 같습니다.\n" />

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:padding="5dp"
                android:src="@drawable/random11" />
            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:padding="5dp"
                android:src="@drawable/random12" />
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:padding="5dp"
                android:text="\n  이 코드의 경우 실행할 때마다 결과가 달라지는 것을 확인할 수 있습니다." />



        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton12_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="28dp"
        android:layout_marginLeft="28dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton12_3"
        android:layout_toLeftOf="@+id/forwardButton12_3"
        android:layout_toEndOf="@+id/backButton12_3"
        android:layout_toRightOf="@+id/backButton12_3"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton12_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

    <ImageButton
        android:id="@+id/backButton12_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="69dp"
        android:layout_marginLeft="69dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/back_button" />

</RelativeLayout>
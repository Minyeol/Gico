<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit1.FragmentContent3">

    <!-- TODO: Update blank fragment layout -->

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/homeButton3_2"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_marginStart="30dp"
        android:layout_marginTop="30dp"
        android:layout_marginEnd="30dp"
        android:layout_marginBottom="30dp"
        android:background="@drawable/edge">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:padding="5dp"
                android:text="  먼저 for문에 대해서 알아보겠습니다. for문은 반복문의 종류 중 하나로, 다음과 같은 구조를 가집니다.\n\n
for(초기식;조건식;변화식) {\n
    반복할 코드;\n
}\n\n
  이렇게 보면 if문과 형태는 유사해 보입니다. 하지만 둥근 괄호 안에 문장이 3개가 들어가 있는 점이 차이라고 볼 수 있습니다. 이 문장들의 기능에 대해 알아봅시다.\n\n
  먼저 초기식은 반복에 사용할 변수를 선언하고 초기화하는 역할을 합니다. 이러한 변수는 보통 i를 사용하며, int i = 0과 같은 식을 입력하여 이를 선언하고, 초기화 해둡니다. 이렇게 선언한 변수는 for문 안에서 자유롭게 사용할 수 있습니다. 이 위치에서 변수를 선언하는 것은 1999년도부터 C의 표준이 되었습니다. 따라서 그 이전에 만들어진 컴파일러를 사용하는 경우 int i = 0과 같이 입력하면 컴파일 에러가 발생할 수 있습니다. 이러한 경우에는 i를 위에서 선언하여 둔 뒤 초기식 위치에서 i = 0과 같은 식으로 초기화해주어야 합니다.\n\n
  다음으로 조건식입니다. 조건식은 반복을 얼마나 할 것인지를 결정하는 역할을 합니다. 조건식 위치에는 i \u003C 100 등의 조건문을 입력하여 주면 되는데, 이 조건문의 연산결과가 참인 경우에만 반복을 실행합니다.\n\n
  마지막으로 변화식입니다. 변화식은 반복에 사용할 변수를 변화시키는 역할을 합니다. 조건식을 i \u003C 100과 같이 선언하였는데, i의 값에 변화가 없으면 조건식이 항상 참이 되므로 무한 루프에 빠지게 됩니다. 따라서 변화식을 i++과 같이 설정하여 조건식이 거짓이 될 수 있도록 i의 값을 변화시켜주어야 합니다.\n\n
  for문의 실행순서는 다음과 같습니다. 먼저 초기식을 실행하고, 조건식을 실행해 봅니다. 조건식이 참이라면 반복할 코드를 모두 실행하고 마지막으로 변화식을 실행합니다. 변화식이 실행된 이후에는 다시 조건식을 실행해보며, 이를 조건식이 거짓이 될 때까지 반복합니다.\n\n
  그러면 for문을 활용하여 “GIST가 최고야!”를 100번 출력해봅시다. 코드는 다음과 같습니다.\n" />

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:padding="5dp"
                android:src="@drawable/loop21" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:padding="5dp"
                android:text="\n  이 코드가 실행이 되는 과정을 한번 따라가 봅시다. 먼저 초기식에서 i를 선언하여 0으로 초기화합니다. 이후 조건식을 실행해 보니 i가 0이므로 100보다 작습니다. 따라서 “GIST가 최고야!”를 출력하고, 변화식이 실행되어 i값이 1로 증가합니다. “GIST가 최고야!”를 100번 출력하고 나면 i값이 100으로 증가합니다. 100은 100보다 작지 않으므로 조건식이 거짓이 되어 for문을 빠져나오게 됩니다.\n\n
  반복문을 사용하기 위해선 위와 같은 과정을 잘 이해하고 있어야 합니다. 우선 문제 상황에 맞는 초기 값을 정하는 것이 중요합니다. 연산을 0부터 시작하는 경우가 많지만, 1, 2 등으로 시작하는 경우도 많으며, 어떤 경우는 다른 변수로 시작하기도 합니다. 또한, \u003C, \u003C=, \u003E, \u003E= 등의 비교연산자들을 문제 상황과 초기 값에 맞도록 설정해야 오류를 막을 수 있습니다. 당연히 변화식도 상황에 맞게 사용해야 하며, ++, -- 등의 1씩 변화시키는 것을 벗어나 2 또는 다른 수들을 사용하는 것이 좋을 수도 있습니다. 이들을 빠르게 이해하고, 사용하기 위해선 경험이 중요하니 많은 연습을 해 보시길 바랍니다." />
        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton3_2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="28dp"
        android:layout_marginLeft="28dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton3_2"
        android:layout_toLeftOf="@+id/forwardButton3_2"
        android:layout_toEndOf="@+id/backButton3_2"
        android:layout_toRightOf="@+id/backButton3_2"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton3_2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

    <ImageButton
        android:id="@+id/backButton3_2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="69dp"
        android:layout_marginLeft="69dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/back_button" />

</RelativeLayout>
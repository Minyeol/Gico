<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit1.FragmentContent3">

    <!-- TODO: Update blank fragment layout -->

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/homeButton4_3"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_marginStart="30dp"
        android:layout_marginTop="30dp"
        android:layout_marginEnd="30dp"
        android:layout_marginBottom="30dp"
        android:background="@drawable/edge">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="     다시 5-2의 코드로 돌아가 봅시다.\n
" />
            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/func21" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="      이 코드에서, print_square 내부에서 정의된 sum은 생성될 때마다 0으로 초기화됩니다. 그래서 print_square 함수가 끝나면, 즉 }에 도달하면 sum은 삭제되기 때문에, sum은 자신이 어떤 역할을 했는지 기억하지 못합니다. 우리는 이제 sum이 자신의 역할을 기억할 수 있도록 만들고 싶습니다. sum을 전역 변수로 만들지 않고도 그렇게 하는 것이 가능할까요?\n
 네, 가능합니다. 기억 영역 지시자(storage class specifiers)를 사용하면 됩니다. C언어에서 제공하는 기억 영역 지시자는 auto, register, extern, static이 있습니다. 그 중에서도 우리가 사용할 기억 영역 지시자는 static입니다.\n
" />

            <ImageView
                android:id="@+id/imageView5"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:adjustViewBounds="true"
                android:src="@drawable/func4" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="      코드를 자세히 살펴봅시다. 5-2에서 제시된 코드와 비교해 보았을 때, 어떤 점이 달라졌을까요? 먼저 print_square 함수 내부를 살펴보면, line 15가 static unsigned int로 바뀌었다는 것 말고는 차이점이 없습니다. 그리고 main 함수 내부를 보면, line 8과 9에서 sum 옆에 달린 연산자가 +=에서 =으로 바뀌었습니다. 그렇게 바뀌어도 실행 결과가 똑같이 나오는 것을 보면, 5-2에서 제시된 코드와 달리 sum이 자신이 했던 일을 기억하고 있다는 것을 볼 수 있겠죠?\n
 이제 static 지시자의 역할에 대해서 감이 오시나요? static 지시자가 붙은 변수는 함수를 빠져나가도 그 값을 유지할 수 있습니다. 또한 line 15에서 볼 수 있듯이, static 지시자가 붙은 변수의 초기화문은 함수가 첫 번째로 호출되었을 때 한 번만 실행됩니다.\n

 앞서 C언어에서 제공하는 기억 영역 지시자는 auto, register, extern, static이 있다고 말씀드렸는데요, 이들에 대해 차근차근 알아봅시다. \n
 auto 기억 영역 지시자는 변수에 아무런 기억 영역 지시자를 붙이지 않았을 때 자동으로 붙여지는 지시자로, auto가 붙은 변수는 아무런 기억 영역 지시자를 붙이지 않은 변수와 똑같이 행동합니다. 즉 (int n = 0;)과 (auto int n = 0;)은 같은 문장이라는 것이죠. 그렇기 때문에 auto를 굳이 사용할 필요가 없습니다.\n
 register 기억 영역 지시자는 변수가 메모리 대신 레지스터에 저장되기를 원한다는 사실을 컴파일러에게 알려주는 지시자입니다. 과거 컴파일러의 성능이 좋지 않았을 때 프로그래머들은 이런 식으로 메모리와 레지스터를 일일이 관리했는데요, 지금은 컴파일러의 성능이 좋아져 컴파일러가 스스로 메모리와 레지스터를 최적으로 활용하므로 대부분의 컴파일러가 register 구문을 무시합니다. 즉 현대에는 굳이 사용할 필요가 없는 지시자입니다.\n
 extern 지역 영역 지시자는 다른 파일에서도 전역 변수나 전역 함수에 접근할 수 있도록 참조(reference)를 제시해 줍니다.\n
 마지막으로 static 지역 영역 지시자는 이전에 알아보았던 것처럼, 변수의 생명 주기(Life Cycle)을 연장해 주는 지시자입니다. static 지역 영역 지시자가 붙은 변수는 함수를 빠져나가도 그 값이 유지됩니다.\n
 static 지시자는 전역 변수에도 사용할 수 있는데요, 이 경우 변수의 Scope는 변수가 선언된 파일 내로 제한됩니다. 즉 다른 파일에서는 static 지시자가 붙은 전역 변수에 접근할 수 없습니다.\n
" />

        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="28dp"
        android:layout_marginLeft="28dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton4_3"
        android:layout_toLeftOf="@+id/forwardButton4_3"
        android:layout_toEndOf="@+id/backButton4_3"
        android:layout_toRightOf="@+id/backButton4_3"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/backButton4_3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="69dp"
        android:layout_marginLeft="69dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/back_button" />

</RelativeLayout>
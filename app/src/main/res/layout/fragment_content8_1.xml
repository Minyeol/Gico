<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit8.FragmentContent8_1">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_above="@+id/homeButton8_1"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_centerHorizontal="true"
        android:layout_marginStart="30dp"
        android:layout_marginLeft="30dp"
        android:layout_marginTop="29dp"
        android:layout_marginEnd="30dp"
        android:layout_marginRight="30dp"
        android:layout_marginBottom="31dp"
        android:background="@color/white">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:id="@+id/textView811"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n 배열은 변수 이름 뒤에 [ ] (대괄호)를 붙인 뒤 크기를 설정합니다. 그리고 배열을 선언하면서 값을 초기화할 때는 { } (중괄호)를 사용합니다. \n 자료형 배열이름[크기]; \n
자료형 배열이름[크기] = { 값, 값, 값 }; \n다음 코드를 실행해보세요.\n" />

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array1" />

            <TextView
                android:id="@+id/textView812"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n int numArr[5]은 크기가 5인 int형 배열을 선언한다는 뜻입니다. 배열을 선언하면서 값을 초기화 할 때는 { } 안의 값 개수는 배열의 크기보다 크면 안 됩니다. 또한, { }를 사용하여 배열에 값을 할당하는 방법은 배열을 선언할 때만 사용할 수 있습니다.
배열에 값이 저장된 공간을 요소(element)라고 합니다. 배열에서 각 요소에 접근하려면 배열 뒤에 [ ] (대괄호)를 사용하며 [ ] 안에 각 요소의 인덱스를 넣으면 됩니다.\n" />

            <TextView
                android:id="@+id/textView813"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="이번에는 배열의 모든 요소를 0으로 초기화해보겠습니다.\n 자료형 배열이름[크기] = { 0, };" />

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array2" />

            <TextView
                android:id="@+id/textView814"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="배열을 선언할 때 { 0, }을 할당하여 배열의 요소를 모두 0으로 초기화했습니다. 이렇게 하면 초기화할 때 0을 하나하나 넣지 않아도 됩니다." />

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array3" />

            <TextView
                android:id="@+id/textView815"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="대괄호 []에 인덱스를 지정한 뒤 값을 할당하면 됩니다.

그렇다면 배열의 범위를 벗어난 인덱스에 접근하면 어떻게 될까요?

배열의 요소에 접근할 때 인덱스로 음수나 배열의 크기를 벗어난 수를 지정해도 컴파일 에러가 발생하지 않습니다. 하지만 실행을 해보면 쓰레기값이 출력됩니다. 이는 배열의 범위를 벗어난 인덱스에 접근하면 배열이 아닌 다른 메모리 공간에 접근하게 되기 때문입니다.

만약 배열의 범위를 벗어난 인덱스에 접근을 하여 값을 할당하면 예상할 수 없는 메모리에 값을 저장하게 되어 프로그램이 비정상적으로 실행될 수 있으므로 주의해야 합니다.

이미 선언된 배열의 크기(요소 개수)를 구하려면 어떻게 해야 할까요? 배열의 크기는 sizeof 연산자를 이용해 간단히 구할 수 있습니다. " />

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/array4" />

            <TextView
                android:id="@+id/textView816"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="배열에 sizeof 연산자를 사용해보면 배열이 차지하는 전체 공간이 출력됩니다. 따라서 int numArr[10];은 크기가 4바이트인 int형 요소가 10개 모여있으므로 40이 출력됩니다.

배열의 크기(요소 개수)를 구할 때는 배열이 차지하는 전체 공간에서 요소의 크기로 나눠줍니다." />
        </LinearLayout>

    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton8_1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="170dp"
        android:layout_marginLeft="170dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton8_1"
        android:layout_toLeftOf="@+id/forwardButton8_1"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton8_1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />
</RelativeLayout>
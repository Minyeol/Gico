<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/appmenu1"
    tools:context=".study.unit9.FragmentContent9_1">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_above="@+id/homeButton9_1"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_centerHorizontal="true"
        android:layout_marginStart="30dp"
        android:layout_marginLeft="30dp"
        android:layout_marginTop="29dp"
        android:layout_marginEnd="30dp"
        android:layout_marginRight="30dp"
        android:layout_marginBottom="31dp"
        android:background="@color/white">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n1. 구조체\n\n
구조체란 타입이 다른 데이터를 하나로 묶는 방법입니다. 배열의 경우 타입이 같은 데이터만 묶을 수 있었습니다. 그러나 우리가 프로그래밍을 하다 보면 서로 다른 타입의 데이터를 묶어서 관리해야 할 일이 많이 생깁니다. 구조체는 그런 데이터를 이름을 붙여서 필드로 관리하게 됩니다. 예를 들어 학생을 나타내는 구조체라면 이름, 나이, 점수를 가질 수 있는데 이름은 문자열이고 나이는 int, 점수는 float로 표시되어야 한다면 구조체로 이들 세 개의 값을 묶어서 관리할 수 있습니다.
\n"/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n구조체는 먼저 선언을 해주어야 합니다. 구조체 안에 어떤 필드가 있는지 정해 주는 과정이라고 할 수 있습니다. 다음은 구조체를 선언하는 형식입니다. \n"/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/struct1" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n그럼 학생 구조체를 선언했는데, 이것으로 실제 데이터를 저장하기 위해 변수를 선언할 수 있습니다. 구조체의 데이터를 저장할 수 있는 크기의 메모리가 할당되고 그 영역에 s1이라는 이름을 붙이게 됩니다. 그렇게 할당된 영역을 객체라고 합니다. 특정 데이터를 저장할 수 있는 메모리 공간이 생기는 것을 객체가 생겼다는 의미로 해석될 수 있습니다. 여기서는 학생 객체 s1이 하나 생겼다고 할 수 있습니다. 다음 코드를 통해 우리는 s1.age로 그 학생의 나이 필드를 저장하거나 읽어올 수 있습니다.\n"/>

            <ImageView
                android:adjustViewBounds="true"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:src="@drawable/struct2" />


            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="0dp"
                android:layout_marginTop="0dp"
                android:layout_marginEnd="0dp"
                android:text="\n이렇게 우리는 구조체를 이용해 이름, 나이,점수 세 개의 값을 묶어서 가지는 변수를 선언할 수 있고 선언할 때마다 학생 객체가 하나 메모리에 할당됩니다. 그리고 구조체 안의 필드를  s.name이나 s.age로 접근할 수도 있고 구조체 변수 s를 통째로 주고 받을 수도 있습니다.
\n\n여기까지 해서 구조체가 무엇인지 간단히 살펴보았습니다.앞으로 자바 프로그래밍에서 객체지향과 객체에 대해 이해하게 되면 좀 더 쉽게 구조체를 이해할 수 있을 것입니다.

\n"/>

        </LinearLayout>
    </ScrollView>

    <ImageButton
        android:id="@+id/homeButton9_1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentBottom="true"
        android:layout_marginStart="170dp"
        android:layout_marginLeft="170dp"
        android:layout_marginEnd="28dp"
        android:layout_marginRight="28dp"
        android:layout_marginBottom="30dp"
        android:layout_toStartOf="@+id/forwardButton9_1"
        android:layout_toLeftOf="@+id/forwardButton9_1"
        android:src="@drawable/home_button" />

    <ImageButton
        android:id="@+id/forwardButton9_1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentEnd="true"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:layout_marginEnd="70dp"
        android:layout_marginRight="70dp"
        android:layout_marginBottom="30dp"
        android:src="@drawable/forward_button" />

</RelativeLayout>